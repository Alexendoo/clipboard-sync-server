// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testDevices(t *testing.T) {
	t.Parallel()

	query := Devices(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testDevicesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	device := &Device{}
	if err = randomize.Struct(seed, device, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = device.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = device.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Devices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDevicesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	device := &Device{}
	if err = randomize.Struct(seed, device, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = device.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Devices(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Devices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDevicesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	device := &Device{}
	if err = randomize.Struct(seed, device, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = device.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := DeviceSlice{device}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Devices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testDevicesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	device := &Device{}
	if err = randomize.Struct(seed, device, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = device.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := DeviceExists(tx, device.ID)
	if err != nil {
		t.Errorf("Unable to check if Device exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DeviceExistsG to return true, but got false.")
	}
}
func testDevicesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	device := &Device{}
	if err = randomize.Struct(seed, device, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = device.Insert(tx); err != nil {
		t.Error(err)
	}

	deviceFound, err := FindDevice(tx, device.ID)
	if err != nil {
		t.Error(err)
	}

	if deviceFound == nil {
		t.Error("want a record, got nil")
	}
}
func testDevicesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	device := &Device{}
	if err = randomize.Struct(seed, device, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = device.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Devices(tx).Bind(device); err != nil {
		t.Error(err)
	}
}

func testDevicesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	device := &Device{}
	if err = randomize.Struct(seed, device, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = device.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Devices(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDevicesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	deviceOne := &Device{}
	deviceTwo := &Device{}
	if err = randomize.Struct(seed, deviceOne, deviceDBTypes, false, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}
	if err = randomize.Struct(seed, deviceTwo, deviceDBTypes, false, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = deviceOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = deviceTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Devices(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDevicesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	deviceOne := &Device{}
	deviceTwo := &Device{}
	if err = randomize.Struct(seed, deviceOne, deviceDBTypes, false, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}
	if err = randomize.Struct(seed, deviceTwo, deviceDBTypes, false, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = deviceOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = deviceTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Devices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testDevicesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	device := &Device{}
	if err = randomize.Struct(seed, device, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = device.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Devices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDevicesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	device := &Device{}
	if err = randomize.Struct(seed, device, deviceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = device.Insert(tx, deviceColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Devices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeviceToOneUserUsingUser(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Device
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.User(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DeviceSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*Device)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDeviceToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Device
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deviceDBTypes, false, strmangle.SetComplement(devicePrimaryKeyColumns, deviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Devices[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}
func testDevicesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	device := &Device{}
	if err = randomize.Struct(seed, device, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = device.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = device.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testDevicesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	device := &Device{}
	if err = randomize.Struct(seed, device, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = device.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := DeviceSlice{device}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testDevicesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	device := &Device{}
	if err = randomize.Struct(seed, device, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = device.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Devices(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	deviceDBTypes = map[string]string{`DeviceType`: `integer`, `ID`: `integer`, `Name`: `character varying`, `UserID`: `integer`}
	_             = bytes.MinRead
)

func testDevicesUpdate(t *testing.T) {
	t.Parallel()

	if len(deviceColumns) == len(devicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	device := &Device{}
	if err = randomize.Struct(seed, device, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = device.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Devices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, device, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	if err = device.Update(tx); err != nil {
		t.Error(err)
	}
}

func testDevicesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(deviceColumns) == len(devicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	device := &Device{}
	if err = randomize.Struct(seed, device, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = device.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Devices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, device, deviceDBTypes, true, devicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(deviceColumns, devicePrimaryKeyColumns) {
		fields = deviceColumns
	} else {
		fields = strmangle.SetComplement(
			deviceColumns,
			devicePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(device))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := DeviceSlice{device}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testDevicesUpsert(t *testing.T) {
	t.Parallel()

	if len(deviceColumns) == len(devicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	device := Device{}
	if err = randomize.Struct(seed, &device, deviceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = device.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Device: %s", err)
	}

	count, err := Devices(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &device, deviceDBTypes, false, devicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	if err = device.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Device: %s", err)
	}

	count, err = Devices(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
